from ner_dataset import NERDataset
from datasets import load_dataset
import nltk
import os
import pathlib
from nltk.tokenize.treebank import TreebankWordDetokenizer

def prepare_malware_dataset():
    os.system("curl -L -O https://github.com/statnlp-research/statnlp-datasets/raw/master/dataset/MalwareTextDB-1.0.zip")
    os.system("unzip /content/MalwareTextDB-1.0.zip -d /content/MalwareTextDB-1.0")
    os.mkdir("MalwareTextDB_Text")

    for dirname, _, filenames in os.walk('/content/MalwareTextDB-1.0/data/tokenized'):
        for filename in filenames:
            if filename == "apt28.tokens":
                continue
            print(filename)
            iob_text = open(os.path.join(dirname, filename), 'r').read()
            tree = nltk.chunk.conllstr2tree(iob_text)
            tokens = [token for token, _ in tree.leaves()]
            text = TreebankWordDetokenizer().detokenize(tokens)

            fpath = pathlib.Path(filename)
            result = fpath.with_suffix('.txt')
            open(f"MalwareTextDB_Text/{result}", "w").write(text)
    
    dataset = load_dataset("text", data_dir="/content/MalwareTextDB_Text")
    dataset.push_to_hub("naorm/malware-text-db")

class MalwareTextDataset(NERDataset):
    def __init__(self, max_items = None, num_sentences = 1):
        dataset = load_dataset('naorm/malware-text-db')
        malware_text = dataset.data['train'].to_pandas()

        super().__init__(malware_text, max_items, num_sentences)